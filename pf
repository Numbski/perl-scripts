#!/usr/bin/perl
#
#   IMPORTANT: READ THIS IN ITS ENTIRETY. YOU ARE THE FINAL AUTHORITY IN DETERMINING
#   WHAT HAPPENS ON YOUR COMPUTER. YOU SHOULD READ ALL DOCUMENTATION PERTAINING TO
#   THE INSTALLATION AND USE OF ALL SOFTWARE YOU INSTALL AND USE AND SHOULD MAKE 
#   REGULAR AND COMPLETE BACKUPS OF YOUR IMPORTANT DATA.
#
#   PF - Point & Figure Charting
#
#   -------------------------LEGAL INFO--------------------------------------------
#
#   This script is Copyright (C) 1999  Jim Michael and XMLWorks All Rights Reserved
#
#   This is version 1.0.0 (11 Jan 1999)
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#   Download and parsing script for www.yahoo.com. This script will most
#   assuredly NOT work with other quote sources. Contact us for assistance
#   if you would like to use this script for other quote sources.
#
#   ------------------------------USAGE INFO-------------------------------------
#
#   USAGE: perl pf
#
#   This program is written for input files with the format:
#
#	ticker,last,date,time,change,low,high,vol
#
#   If your file has a different format then you will need to modify the pf subroutine.
#   The line you would modify is line #115 looks like this:
#
#    ($ticker,$last,$date,$time,$change,$low,$high,$vol) = split /,/; # MODIFY AS NEEDED
#
#   The $last variable is the one that will be used to construct the P&F chart. Here is 
#   an example for an input file with only date and last fields:
#
#    ($date,$last) = split /,/; # MODIFY AS NEEDED
#
#   Note to Windows NT/95 users:
#
#   If you are on a Win32 platform (NT or Windows95/98) then we recommend that you
#   use Gurusamy Sarathy's Standard Win32 port of Perl 5.04 or higher. The ActiveState port
#   is newer, but this version is known to be stable and included all of the modules used
#   by QuoteMonster. You may download the free perl interpreter from
#   http://www.perl.com/ or see the XMLWorks website for location of the binary download.
#
#
#   ----------------------------------SUPPORT INFO--------------------------------------
#
#   Since this is free software, no support is offered. However, suggestions for improvements
#   to the program are always welcome. If you are using the program and find it useful,
#   please drop us a line sometime. We would enjoy hearing from you.
#
#   Snail Mail: XMLWorks
#               PO Box 941124
#               Atlanta, GA 31141-1124
#               USA 
#   Web: http://www.xmlworks.com/
#
#   Custom modifications to this script or other custom Internet programming
#   in Perl are also available.
#
#
# ----------------------- Enter your custom settings here ----------------------------- #
#
# Instructions:
#
# Lines with comments are preceded by the hash symbol (#). The following lines assign
# values to variables. Some values are numerical and some are not. The numerical values
# are not enclosed in single quotes, the non-numerical entries are enclosed in
# single quotes ('like this'). All perl statements must end with a semicolon (;) and a
# comment may follow on the same line by placing the hash symbol (#) before the comment. 

my $ticker        = '^OEX';              # ticker of the security being plotted
my $inputFile     = 'quote.txt';         # temporary storage file
my $pfFile        = 'oex.html';          # file to store HTML
my $boxsize       = 10;                  # Each X or O represents this amount
my $multiplier    = 100;                 # price will be multiplied by this number
my $reversal      = 10;                  # price move which results in change of direction
my $output        = 1;                   # 1 for output to screen, 0 for output to HTML

# //////////////// DO NOT EDIT ANYTHING BELOW THIS LINE \\\\\\\\\\\\\\\\\\\\ #

unless pf($inputFile,$pfFile,$boxsize,$reversal) {
	print 'Possible problem with file';
}
sub pf() {
	my ($i,$miny,$maxy,$y,$oldP,@g);
	my $in = shift;
	my $out = shift;
	my $boxsize = shift; 
	my $reversal = shift;
	my $direction = 0;
	$miny = 1000000;
	$maxy = 0;
	my $x = 1;
	my $boxes;
	my $newP;
	open (IN,$in) || die("Can't open input file $in - $!");
	while (<IN>) {
		chomp;
		($ticker,$last,$date,$time,$change,$low,$high,$vol) = split /,/; # MODIFY AS NEEDED 
		$last *= $multiplier;
		if ($direction == 1) {
			if ($last > $oldP) {
				$newP = $boxsize * int($last/$boxsize);
				for ($i = $oldP+$boxsize; $i < $newP+$boxsize; $i+=$boxsize) {
					$maxy = $i if ($i > $maxy);
					$g[$x][$i] = 'x';
				}
				$oldP = $newP;			
			}
			elsif ($last < $oldP) {
				$newP = $boxsize*int($last/$boxsize);
				if ($oldP - $newP > $reversal) {
					$x++;
					$direction = -1;
					for ($i = $oldP-$boxsize; $i > $newP-$boxsize; $i-=$boxsize) {
						$miny = $i if ($i < $miny);
						$g[$x][$i] = 'o';
					}
					$oldP = $newP;
				}
			}
		}
		elsif ($direction == -1) {
			if ($last < $oldP) {
				$newP = $boxsize * int($last/$boxsize);
				for ($i = $oldP-$boxsize; $i > $newP-$boxsize; $i-=$boxsize) {
					$miny = $i if ($i < $miny);
					$g[$x][$i] = 'o';
				}
				$oldP = $newP;
			}
			elsif ($last > $oldP) {
				$newP = $boxsize * int($last/$boxsize);
				if ($newP - $oldP > $reversal) {
					$x++;
					$direction = 1;
					for ($i = $oldP+$boxsize; $i < $newP+$boxsize; $i+=$boxsize) {
						$maxy = $i if ($i > $maxy);
						$g[$x][$i] = 'x';
					}
					$oldP = $newP;
				}
			}
		}
		else {
			if (defined($oldP)) {
				if ($last > $oldP) {
					$newP = $boxsize * int($last/$boxsize);
					if ($newP > $oldP) {
						$direction = 1;
						for ($i = $oldP; $i < $newP+$boxsize; $i+=$boxsize) {
							$maxy = $i if ($i > $maxy);
							$g[$x][$i] = 'x';
						}
					}
				}
				elsif ($last < $oldP) {
					$newP = $boxsize * int($last/$boxsize);
					if ($newP < $oldP) {
						$direction = -1;
						for ($i = $oldP; $i > $newP+$boxsize; $i+=$boxsize) {
							$miny = $i if ($i < $miny);
							$g[$x][$i] = 'o';
						}
					}
				}
			}
			else {
				$oldP = $boxsize*int($last/$boxsize);
			}
		}
	}
	close IN;
	my $maxx = $x;
	open (OUT,">$out") || die("Can't open output file $out - $!");
	print OUT '<html><head><META HTTP-EQUIV="PRAGMA" CONTENT="NO-CACHE"><META HTTP-EQUIV="REFRESH" CONTENT="30"></head><body><pre>';
	my $count = 0;
	my $g = '';
	if ($output) {
		system ('cls');
	}
	for ($y = $maxy; $y > $miny-$boxsize; $y-=$boxsize) {
		print OUT "$y ";
		if ($output) {
			print "$y ";
		}
		for ($x = 1; $x < $maxx + 1; $x++) {
			$g[$x][$y] = ' ' unless (defined($g[$x][$y]));
			$g .= $g[$x][$y];
		}
		$g =~ s/ *$//g;
		print OUT "$g\n"; #110
		if ($output) {
			print "$g\n";
		}
		$g = '';
	}
	close OUT;
	return 1;
}
